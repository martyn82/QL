%package org.uva.sea.ql.parser.jacc
%class JACCParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.Node 
%start start

%token BOOLEAN INTEGER MONEY STRING
%token <BooleanLiteral> BOOL
%token <MoneyLiteral> MON
%token <IntegerLiteral> INT
%token <StringLiteral> STR
%token <IdentifierExpression> IDENT
%token '^' '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' '{' '}'
%token ':'
%token TRUE FALSE
%token IF ELSE FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

// data types
%type <BooleanType>     BOOLEAN
%type <IntegerType>     INTEGER
%type <MoneyType>       MONEY
%type <StringType>      STRING

// AST nodes
%type <Assignment>           assignment
%type <Expression>           expression
%type <FormDeclaration>      form
%type <IfThen>               ifthen
%type <IfThenElse>           ifthenelse
%type <Statement>            statement
%type <Statements>           formbody ifbody statements
%type <Type>                 datatype
%type <VariableDeclaration>  vardeclaration

%{
import org.uva.sea.ql.ast.expression.*;
import org.uva.sea.ql.ast.expression.binary.arithmetic.*;
import org.uva.sea.ql.ast.expression.binary.comparison.*;
import org.uva.sea.ql.ast.expression.binary.logical.*;
import org.uva.sea.ql.ast.expression.literal.*;
import org.uva.sea.ql.ast.expression.unary.logical.*;
import org.uva.sea.ql.ast.expression.unary.numeric.*;
import org.uva.sea.ql.ast.statement.*;
import org.uva.sea.ql.ast.type.*;
%}

%%

 start          : statement                        { result = $1; }
                ;

 statements     : statement statements             { $$ = new Statements( $1, $2 ); }
                | statement                        { $$ = new Statements( $1 ); }
                ;

 statement      : form
                | question
                | blockstatement
                | assignment
                ;

 form           : FORM IDENT '{' formbody '}'      { $$ = new FormDeclaration( $2.getName(), $4 ); }
                ;

 formbody       : statements
                ;

 question       : STR vardeclaration               { $$ = new VariableQuestion( $1, $2 ); }
                | STR assignment                   { $$ = new ComputedQuestion( $1, $2 ); }
                ;

 blockstatement : ifthen
                | ifthenelse
                ;

 ifbody         : formbody
                | /* empty */                      { $$ = new Statements(); }
                ;

 ifthen         : IF '(' expression ')' '{' ifbody '}'                      { $$ = new IfThen( $3, $6 ); }
                ;
                
 ifthenelse     : IF '(' expression ')' '{' ifbody '}' ELSE '{' ifbody '}'  { $$ = new IfThenElse( $3, $6, $10 ); }
                | IF '(' expression ')' '{' ifbody '}' ELSE ifthen          { $$ = new IfThenElse( $3, $6, new Statements( $9 ) ); }
                | IF '(' expression ')' '{' ifbody '}' ELSE ifthenelse      { $$ = new IfThenElse( $3, $6, new Statements( $9 ) ); }
                ;

 vardeclaration : IDENT ':' datatype               { $$ = new VariableDeclaration( $1, $3 ); }
                ;

 assignment     : IDENT '=' expression             { $$ = new Assignment( $1, $3 ); }
                ;

 comparison     : expression EQ expression         { $$ = new EqualExpression( $1, $3 ); }
                | expression NEQ expression        { $$ = new NotEqualExpression( $1, $3 ); }
                | expression '>' expression        { $$ = new GreaterThanExpression( $1, $3 ); }
                | expression '<' expression        { $$ = new LesserThanExpression( $1, $3 ); }
                | expression GEQ expression        { $$ = new GreaterThanOrEqualExpression( $1, $3 ); }
                | expression LEQ expression        { $$ = new LesserThanOrEqualExpression( $1, $3 ); }
                ;

 arithmetic     : expression '*' expression        { $$ = new MultiplyExpression( $1, $3 ); }
                | expression '/' expression        { $$ = new DivideExpression( $1, $3 ); }
                | expression '+' expression        { $$ = new AddExpression( $1, $3 ); }
                | expression '-' expression        { $$ = new SubtractExpression( $1, $3 ); }
                ;

 logical        : expression AND expression        { $$ = new AndExpression( $1, $3 ); }
                | expression OR expression         { $$ = new OrExpression( $1, $3 ); }
                ;
 
 expression     : '+' expression %prec UPLUS       { $$ = new PositiveExpression( $2 ); }
                | '-' expression %prec UMIN        { $$ = new NegativeExpression( $2 ); }
                | '!' expression %prec UNOT        { $$ = new NotExpression( $2 ); }
                | comparison
                | arithmetic
                | logical
                | literal
                | '(' expression ')'               { $$ = $2; }
                ;

 literal        : BOOL                             { $$ = $1; }
                | MON                              { $$ = $1; }
                | INT                              { $$ = $1; }
                | STR                              { $$ = $1; }
                | IDENT                            { $$ = $1; }
                | boolliteral                      { $$ = $1; }
                ;
                
 boolliteral    : TRUE                             { $$ = new BooleanLiteral( true ); }
                | FALSE                            { $$ = new BooleanLiteral( false ); }
                ;

 datatype       : BOOLEAN                          { $$ = BooleanType.BOOLEAN; }
                | MONEY                            { $$ = MoneyType.MONEY; }
                | INTEGER                          { $$ = IntegerType.INTEGER; }
                | STRING                           { $$ = StringType.STRING; }
                ;

%%
    private QLLexer lexer;
    private Statement result;
    
    public JACCParser( QLLexer lexer ) { 
        this.lexer = lexer;
    }
    
    public Statement getResult() {
        return result;
    }
    
    private void yyerror( String msg ) { 
        System.err.println( msg );
    }